#include<iostream>
#include<string>
using namespace std;

struct Stack {
    char elem[100];
    int top;
};

void push(Stack* s, char item) {
    if (s->top == 99) {
        cout << "Stack is full" << endl;
    } else {
        s->elem[++s->top] = item;
    }
}

bool isempty(Stack* s) {
    return s->top == -1;
}

char pop(Stack* s) {
    if (s->top == -1) {
        cout << "The Stack is empty" << endl;
        return -1;
    } else {
        return s->elem[s->top--];
    }
}

bool balanced(string expr) {
    int count1 = 0, count2 = 0;
    Stack s;
    s.top = -1;

    for (int i = 0; i < expr.length(); ++i) {
        if (expr[i] == '(') {
            count1++;
        }
        if (expr[i] == ')') {
            count2++;
        }

        switch (expr[i]) {
            case '(':
                push(&s, expr[i]);
                break;

            case ')':
                if (isempty(&s) || pop(&s) != '(') {
                    return false;
                }
                break;

            default:
                break;
        }
    }

    if (count1 == count2) {
        int maxlen = count1 + count2;
        cout << "Maximum balanced brackets: " << maxlen << endl;
    }

    return isempty(&s);
}

int main() {
    string expr;
    cout << "Enter the string: " << endl;
    cin >> expr;

    if (balanced(expr)) {
        cout << "The expression is balanced." << endl;
    } else {
        cout << "The expression is not balanced." << endl;
    }

    return 0;
}
