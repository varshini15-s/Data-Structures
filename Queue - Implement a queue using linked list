#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
};

class intq {
public:
    Node* front = NULL;
    Node* rear = NULL;

    // Function to add an element to the queue
    void enq(int data) {
        Node* newnode = new Node();
        newnode->data = data;
        newnode->next = NULL;

        if (front == NULL) {
            front = rear = newnode;
        } else {
            rear->next = newnode;
            rear = newnode;
        }
    }

    // Function to remove an element from the queue
    void deq() {
        if (front == NULL)
            return;

        if (front != rear) {
            Node* temp = front;
            front = front->next;
            delete temp;
        } else {
            delete front;
            front = rear = NULL;
        }
    }

    // Function to display all elements in the queue
    void display() {
        if (front == NULL) {
            cout << "Queue is empty." << endl;
            return;
        }

        Node* temp = front;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    intq q;
    int n, value;

    cout << "Enter the number of elements to enqueue: ";
    cin >> n;
    cout << "Enter the elements of the Queue: " << endl;
    for (int i = 0; i < n; ++i) {
        cin >> value;
        q.enq(value);
    }

    cout << "Queue contents before dequeueing:" << endl;
    q.display();

    cout << "Dequeuing all elements:" << endl;
    while (q.front != NULL) { // Dequeue until the queue is empty
        q.display(); // Display the queue before dequeueing
        q.deq();
    }

    cout << "Queue after dequeuing all the elements: ";
    q.display(); // Display that the queue is empty

    return 0;
}
