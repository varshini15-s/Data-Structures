#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;
};

void insert(Node** head, int data) {
    Node* newNode = new Node();
    newNode->data = data;
    newNode->next = *head;
    newNode->prev = NULL;

    if (*head != NULL) {
        (*head)->prev = newNode;
    }
    *head = newNode;
}

void printList(Node* head) {
    cout << "The list: ";
    while (head != NULL) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

Node* findMiddle(Node* head) {
    if (head == nullptr) {
        return nullptr;
    }

    Node* slow = head;
    Node* fast = head;

    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

int main() {
    Node* head = nullptr;
    int numElements;

    cout << "Enter the number of elements: ";
    cin >> numElements;

    cout << "Enter the elements of the doubly linked list: " << endl;
    for (int i = 0; i < numElements; i++) {
        int data;
        cin >> data;
        insert(&head, data);
    }

    printList(head);

    Node* middle = findMiddle(head);
    if (middle != nullptr) {
        cout << "Middle of the list: " << middle->data << endl;
    } else {
        cout << "The list is empty." << endl;
    }

    return 0;
}
